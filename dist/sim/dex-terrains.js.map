{
  "version": 3,
  "sources": ["../../sim/dex-terrains.ts"],
  "sourcesContent": ["import {EventMethods} from \"./dex-conditions\";\r\nimport {BasicEffect, toID} from './dex-data';\r\n\r\nexport class DataTerrain extends BasicEffect implements Readonly<BasicEffect> {\r\n\treadonly condition: ConditionData;\r\n\tconstructor(data: AnyObject) {\r\n\t\tsuper(data);\r\n\t\tthis.condition = {};\r\n\t}\r\n}\r\nexport interface TerrainData extends Partial<DataTerrain>, EventMethods {\r\n\tcondition: ConditionData;\r\n}\r\n\r\nexport interface Terrain extends Readonly<BasicEffect & TerrainData> {\r\n}\r\n\r\nexport class DexTerrains {\r\n\treadonly dex: ModdedDex;\r\n\treadonly terrainCache = new Map<ID, Terrain>();\r\n\tallCache: readonly Terrain[] | null = null;\r\n\r\n\tconstructor(dex: ModdedDex) {\r\n\t\tthis.dex = dex;\r\n\t}\r\n\r\n\tget(name: string | Terrain): Terrain {\r\n\t\tif (name && typeof name !== 'string') return name;\r\n\r\n\t\tname = (name || '').trim();\r\n\t\tconst id = toID(name);\r\n\t\treturn this.getByID(id);\r\n\t}\r\n\r\n\tgetByID(id: ID): Terrain {\r\n\t\tlet terrain = this.terrainCache.get(id);\r\n\t\tif (terrain) return terrain;\r\n\t\tif (this.dex.data.Aliases.hasOwnProperty(id)) {\r\n\t\t\tterrain = this.get(this.dex.data.Aliases[id]);\r\n\t\t\tif (terrain.exists) {\r\n\t\t\t\tthis.terrainCache.set(id, terrain);\r\n\t\t\t}\r\n\t\t\treturn terrain;\r\n\t\t}\r\n\t\tif (id && this.dex.data.Terrains.hasOwnProperty(id)) {\r\n\t\t\tconst terrainData = this.dex.data.Terrains[id] as any;\r\n\t\t\t//const terrainTextData = this.dex.getDescs('Terrains', id, terrainData);\r\n\t\t\tterrain = new DataTerrain({\r\n\t\t\t\tname: id,\r\n\t\t\t\t...terrainData,\r\n\t\t\t\t//...terrainTextData,\r\n\t\t\t});\r\n\t\t} else {\r\n\t\t\tterrain = new DataTerrain({\r\n\t\t\t\tname: id, exists: false,\r\n\t\t\t});\r\n\t\t}\r\n\t\tif (terrain.exists) this.terrainCache.set(id, this.dex.deepFreeze(terrain));\r\n\t\treturn terrain;\r\n\t}\r\n\r\n\tall(): readonly Terrain[] {\r\n\t\tif (this.allCache) return this.allCache;\r\n\t\tconst terrains = [];\r\n\t\tfor (const id in this.dex.data.Terrains) {\r\n\t\t\tterrains.push(this.getByID(id as ID));\r\n\t\t}\r\n\t\tthis.allCache = Object.freeze(terrains);\r\n\t\treturn this.allCache;\r\n\t}\r\n}\r\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA,sBAAgC;AAEzB,MAAM,oBAAoB,4BAA6C;AAAA,EAE7E,YAAY,MAAiB;AAC5B,UAAM,IAAI;AACV,SAAK,YAAY,CAAC;AAAA,EACnB;AACD;AAQO,MAAM,YAAY;AAAA,EAKxB,YAAY,KAAgB;AAH5B,SAAS,eAAe,oBAAI,IAAiB;AAC7C,oBAAsC;AAGrC,SAAK,MAAM;AAAA,EACZ;AAAA,EAEA,IAAI,MAAiC;AACpC,QAAI,QAAQ,OAAO,SAAS;AAAU,aAAO;AAE7C,YAAQ,QAAQ,IAAI,KAAK;AACzB,UAAM,SAAK,sBAAK,IAAI;AACpB,WAAO,KAAK,QAAQ,EAAE;AAAA,EACvB;AAAA,EAEA,QAAQ,IAAiB;AACxB,QAAI,UAAU,KAAK,aAAa,IAAI,EAAE;AACtC,QAAI;AAAS,aAAO;AACpB,QAAI,KAAK,IAAI,KAAK,QAAQ,eAAe,EAAE,GAAG;AAC7C,gBAAU,KAAK,IAAI,KAAK,IAAI,KAAK,QAAQ,EAAE,CAAC;AAC5C,UAAI,QAAQ,QAAQ;AACnB,aAAK,aAAa,IAAI,IAAI,OAAO;AAAA,MAClC;AACA,aAAO;AAAA,IACR;AACA,QAAI,MAAM,KAAK,IAAI,KAAK,SAAS,eAAe,EAAE,GAAG;AACpD,YAAM,cAAc,KAAK,IAAI,KAAK,SAAS,EAAE;AAE7C,gBAAU,IAAI,YAAY;AAAA,QACzB,MAAM;AAAA,QACN,GAAG;AAAA;AAAA,MAEJ,CAAC;AAAA,IACF,OAAO;AACN,gBAAU,IAAI,YAAY;AAAA,QACzB,MAAM;AAAA,QAAI,QAAQ;AAAA,MACnB,CAAC;AAAA,IACF;AACA,QAAI,QAAQ;AAAQ,WAAK,aAAa,IAAI,IAAI,KAAK,IAAI,WAAW,OAAO,CAAC;AAC1E,WAAO;AAAA,EACR;AAAA,EAEA,MAA0B;AACzB,QAAI,KAAK;AAAU,aAAO,KAAK;AAC/B,UAAM,WAAW,CAAC;AAClB,eAAW,MAAM,KAAK,IAAI,KAAK,UAAU;AACxC,eAAS,KAAK,KAAK,QAAQ,EAAQ,CAAC;AAAA,IACrC;AACA,SAAK,WAAW,OAAO,OAAO,QAAQ;AACtC,WAAO,KAAK;AAAA,EACb;AACD;",
  "names": []
}
